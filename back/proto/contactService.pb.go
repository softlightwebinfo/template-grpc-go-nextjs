// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/contactService.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ContactServiceBool struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContactServiceBool) Reset()         { *m = ContactServiceBool{} }
func (m *ContactServiceBool) String() string { return proto.CompactTextString(m) }
func (*ContactServiceBool) ProtoMessage()    {}
func (*ContactServiceBool) Descriptor() ([]byte, []int) {
	return fileDescriptor_23b04845638848b0, []int{0}
}

func (m *ContactServiceBool) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContactServiceBool.Unmarshal(m, b)
}
func (m *ContactServiceBool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContactServiceBool.Marshal(b, m, deterministic)
}
func (m *ContactServiceBool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactServiceBool.Merge(m, src)
}
func (m *ContactServiceBool) XXX_Size() int {
	return xxx_messageInfo_ContactServiceBool.Size(m)
}
func (m *ContactServiceBool) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactServiceBool.DiscardUnknown(m)
}

var xxx_messageInfo_ContactServiceBool proto.InternalMessageInfo

func (m *ContactServiceBool) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type ContactServiceSendRq struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Email                string   `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Phone                string   `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	Subject              string   `protobuf:"bytes,4,opt,name=subject,proto3" json:"subject,omitempty"`
	Message              string   `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContactServiceSendRq) Reset()         { *m = ContactServiceSendRq{} }
func (m *ContactServiceSendRq) String() string { return proto.CompactTextString(m) }
func (*ContactServiceSendRq) ProtoMessage()    {}
func (*ContactServiceSendRq) Descriptor() ([]byte, []int) {
	return fileDescriptor_23b04845638848b0, []int{1}
}

func (m *ContactServiceSendRq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContactServiceSendRq.Unmarshal(m, b)
}
func (m *ContactServiceSendRq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContactServiceSendRq.Marshal(b, m, deterministic)
}
func (m *ContactServiceSendRq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactServiceSendRq.Merge(m, src)
}
func (m *ContactServiceSendRq) XXX_Size() int {
	return xxx_messageInfo_ContactServiceSendRq.Size(m)
}
func (m *ContactServiceSendRq) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactServiceSendRq.DiscardUnknown(m)
}

var xxx_messageInfo_ContactServiceSendRq proto.InternalMessageInfo

func (m *ContactServiceSendRq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ContactServiceSendRq) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *ContactServiceSendRq) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *ContactServiceSendRq) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *ContactServiceSendRq) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*ContactServiceBool)(nil), "proto.ContactServiceBool")
	proto.RegisterType((*ContactServiceSendRq)(nil), "proto.ContactServiceSendRq")
}

func init() {
	proto.RegisterFile("proto/contactService.proto", fileDescriptor_23b04845638848b0)
}

var fileDescriptor_23b04845638848b0 = []byte{
	// 196 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2a, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0xce, 0xcf, 0x2b, 0x49, 0x4c, 0x2e, 0x09, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e,
	0xd5, 0x03, 0x0b, 0x0a, 0xb1, 0x82, 0x29, 0x25, 0x3d, 0x2e, 0x21, 0x67, 0x14, 0x69, 0xa7, 0xfc,
	0xfc, 0x1c, 0x21, 0x09, 0x2e, 0xf6, 0xe2, 0xd2, 0xe4, 0xe4, 0xd4, 0xe2, 0x62, 0x09, 0x46, 0x05,
	0x46, 0x0d, 0x8e, 0x20, 0x18, 0x57, 0xa9, 0x8b, 0x91, 0x4b, 0x04, 0x55, 0x43, 0x70, 0x6a, 0x5e,
	0x4a, 0x50, 0xa1, 0x90, 0x10, 0x17, 0x4b, 0x5e, 0x62, 0x6e, 0x2a, 0x58, 0x3d, 0x67, 0x10, 0x98,
	0x2d, 0x24, 0xc2, 0xc5, 0x9a, 0x9a, 0x9b, 0x98, 0x99, 0x23, 0xc1, 0x04, 0x16, 0x84, 0x70, 0x40,
	0xa2, 0x05, 0x19, 0xf9, 0x79, 0xa9, 0x12, 0xcc, 0x10, 0x51, 0x30, 0x07, 0x62, 0x65, 0x52, 0x56,
	0x6a, 0x72, 0x89, 0x04, 0x0b, 0x58, 0x1c, 0xc6, 0x05, 0xc9, 0xe4, 0xa6, 0x16, 0x17, 0x27, 0xa6,
	0xa7, 0x4a, 0xb0, 0x42, 0x64, 0xa0, 0x5c, 0xa3, 0x00, 0x2e, 0x3e, 0x54, 0xb7, 0x08, 0xd9, 0x71,
	0xb1, 0x80, 0xdc, 0x23, 0x24, 0x0d, 0xf1, 0xa5, 0x1e, 0x36, 0xa7, 0x4a, 0x49, 0x62, 0x95, 0x04,
	0x79, 0x3c, 0x89, 0x0d, 0x2c, 0x63, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x53, 0xe6, 0x62, 0x97,
	0x3a, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ContactServiceClient is the client API for ContactService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ContactServiceClient interface {
	Send(ctx context.Context, in *ContactServiceSendRq, opts ...grpc.CallOption) (*ContactServiceBool, error)
}

type contactServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContactServiceClient(cc grpc.ClientConnInterface) ContactServiceClient {
	return &contactServiceClient{cc}
}

func (c *contactServiceClient) Send(ctx context.Context, in *ContactServiceSendRq, opts ...grpc.CallOption) (*ContactServiceBool, error) {
	out := new(ContactServiceBool)
	err := c.cc.Invoke(ctx, "/proto.ContactService/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContactServiceServer is the server API for ContactService service.
type ContactServiceServer interface {
	Send(context.Context, *ContactServiceSendRq) (*ContactServiceBool, error)
}

// UnimplementedContactServiceServer can be embedded to have forward compatible implementations.
type UnimplementedContactServiceServer struct {
}

func (*UnimplementedContactServiceServer) Send(ctx context.Context, req *ContactServiceSendRq) (*ContactServiceBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}

func RegisterContactServiceServer(s *grpc.Server, srv ContactServiceServer) {
	s.RegisterService(&_ContactService_serviceDesc, srv)
}

func _ContactService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactServiceSendRq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ContactService/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactServiceServer).Send(ctx, req.(*ContactServiceSendRq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ContactService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ContactService",
	HandlerType: (*ContactServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _ContactService_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/contactService.proto",
}
